framework:
    messenger:
        # failure_transport: failed
        # serializer:
        #     default_serializer: App\Messenger\CelerySerializer

        transports:
            submission_amqp:
                dsn: "%env(MESSENGER_TRANSPORT_DSN)%"
                # Celery Seriliazer
                # serializer: App\Messenger\CelerySerializer
                serializer: messenger.transport.symfony_serializer
                # retry_strategy:
                #     max_retries: 3
                #     # milliseconds delay
                #     delay: 1000
                #     # causes the delay to be higher before each retry
                #     # e.g. 1 second delay, 2 seconds, 4 seconds
                #     multiplier: 2
                #     max_delay: 0
                options:
                    exchange:
                        name: submission_exchange
                        type: direct
                    queues:
                        submission_low_priority_queue:
                            binding_keys: [low_priority_submission]
                            arguments: { "x-max-priority": "%app.messenger.max_priority%" }
                        submission_high_priority_queue:
                            binding_keys: [high_priority_submission]
                            arguments: { "x-max-priority": "%app.messenger.max_priority%" }
                        # submission_premium_queue:
                        #     binding_keys: [premium_submission]
                        #     arguments: { "x-max-priority": "%app.messenger.max_priority%" }
            
            competition_status_amqp:
                dsn: "%env(MESSENGER_TRANSPORT_DSN)%"
                serializer: messenger.transport.symfony_serializer
                options:
                    exchange:
                        name: delayed_competition_status_exchange
                        type: x-delayed-message
                        arguments:
                            x-delayed-type: direct
                    queues:
                        competition_status_queue:
                            binding_keys: [competition_status]
                        competition_winner_generation_queue:
                            binding_keys: [winner_trigger]
                # prefetch_count: 100
                #     auto_setup: false
                # retry_strategy:
                #     max_retries: 3
                #     delay: 1000
            
            email_amqp:
                dsn: '%env(MESSENGER_TRANSPORT_DSN)%'
                serializer: messenger.transport.symfony_serializer
                options:
                    exchange:
                        name: email_exchange
                        type: direct
                    queues:
                        email_verification_queue:
                            binding_keys: [email_verification]
                        email_notification_queue:
                            binding_keys: [email_notification]

            
            # winner_trigger_amqp:
            #     dsn: "%env(MESSENGER_TRANSPORT_DSN)%"
            #     serializer: messenger.transport.symfony_serializer
            #     options:
            #         exchange:
            #             name: delayed_winner_exchange
            #             type: x-delayed-message
            #             arguments:
            #                 x-delayed-type: direct
            #         queues:
            #             competition_winner_generation_queue:
            #                 binding_keys: [winner_trigger]

            # --- AMQP Alternative for Failed Messages ---
            # Define a separate DSN for the failed transport, pointing to your RabbitMQ.
            # The 'queue_name' parameter tells Messenger which queue to send failed messages to.
            # failed: '%env(MESSENGER_TRANSPORT_DSN)%?queue_name=failed_messages'

        routing:
            # Route your messages to the transports
            App\Message\CompetitionSubmittionMessage: submission_amqp
            App\Message\WinnerTriggerMessage: competition_status_amqp
            App\Message\CompetitionUpdateStatusMessage: competition_status_amqp
            App\Message\VerificationEmailMessage: email_amqp
            App\Message\EmailNotificationMessage: email_amqp

# when@test:
#    framework:
#        messenger:
#            transports:
#                # replace with your transport name here (e.g., my_transport: 'in-memory://')
#                # For more Messenger testing tools, see https://github.com/zenstruck/messenger-test
#                async: 'in-memory://'
