services:
  php:
    image: ${IMAGES_PREFIX:-}app-php
    restart: unless-stopped
    environment:
      SERVER_NAME: ${SERVER_NAME:-localhost}, php:80
      SYMFONY_VERSION: ${SYMFONY_VERSION:-}
      STABILITY: ${STABILITY:-stable}
      MERCURE_PUBLISHER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      MERCURE_SUBSCRIBER_JWT_KEY: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      # Run "composer require symfony/orm-pack" to install and configure Doctrine ORM
      DATABASE_URL: postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/${POSTGRES_DB:-app}?serverVersion=${POSTGRES_VERSION:-15}&charset=${POSTGRES_CHARSET:-utf8}
      # Run "composer require symfony/mercure-bundle" to install and configure the Mercure integration
      # REDIS_HOST: redis
      # REDIS_PORT: 6379
      MERCURE_URL: ${CADDY_MERCURE_URL:-https://symfony.localhost:443/.well-known/mercure}
      MERCURE_PUBLIC_URL: ${CADDY_MERCURE_PUBLIC_URL:-https://${SERVER_NAME:-symfony.localhost}:${HTTPS_PORT:-443}/.well-known/mercure}
      MERCURE_JWT_SECRET: ${CADDY_MERCURE_JWT_SECRET:-!ChangeThisMercureHubJWTSecretKey!}
      # The two next lines can be removed after initial installation
    volumes:
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - redis
    ports:
      # HTTP
      - target: 80
        published: ${HTTP_PORT:-80}
        protocol: tcp
      # HTTPS
      - target: 443
        published: ${HTTPS_PORT:-443}
        protocol: tcp
      # HTTP/3
      - target: 443
        published: ${HTTP3_PORT:-443}
        protocol: udp

# Mercure is installed as a Caddy module, prevent the Flex recipe from installing another service
###> symfony/mercure-bundle ###
###< symfony/mercure-bundle ###

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

  rabbitmq:
    image: heidiks/rabbitmq-delayed-message-exchange:latest
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck: # Docker's healthcheck for the RabbitMQ service
      test: ["CMD", "rabbitmq-diagnostics", "status"] # Checks RabbitMQ's internal status
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s # Gives RabbitMQ a grace period to start up initially
    # volumes:
    #   - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf

  # RabbitMQ Topology Declaration Service
  rabbitmq_topology:
    image: heidiks/rabbitmq-delayed-message-exchange:latest
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./rabbitmq/rabbitmq_topology.sh:/usr/local/bin/rabbitmq_topology.sh:ro
    command: /usr/local/bin/rabbitmq_topology.sh
  
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    # volumes:
    #   - redis_data:/data


  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    command: "/bin/bash -c 'tail -f /dev/null'"
    # environment:
    #   RABBITMQ_HOST: rabbitmq    
    #   REDIS_HOST: redis          
    #   POSTGRES_HOST: database    
    #   POSTGRES_DB: ${POSTGRES_DB:-app} 
    #   POSTGRES_USER: ${POSTGRES_USER:-app} 
    #   POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!} 
    depends_on:
      - rabbitmq
      - database
      - redis
      - rabbitmq_topology 
    volumes:
      - ./worker:/usr/src

  ## TODO:
  # submission_worker:
  #   build: ./worker
  #   command: celery -A app.celery_app:app worker -Q high_load -n high_worker@%h --concurrency=4
  #   depends_on:
  #     - rabbitmq
  #     - database
  #     - redis
  #     - rabbitmq_topology 

  ## TODO:
  # winner_worker:
  #   build: .
  #   command: celery -A app.celery_app:app worker -Q low_load -n low_worker@%h --concurrency=1
  #   depends_on:
  #     - rabbitmq
  #     - database
  #     - redis
  #     - rabbitmq_topology 

  ## TODO:
  # premium_submission_worker:

volumes:
  caddy_data:
  caddy_config:
###> symfony/mercure-bundle ###
###< symfony/mercure-bundle ###

###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
